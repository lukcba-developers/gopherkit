# OpenTelemetry Collector configuration for GopherKit
receivers:
  # OTLP receivers for traces, metrics, and logs
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver to scrape metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          static_configs:
            - targets: ['0.0.0.0:8888']
        - job_name: 'gopherkit-services'
          static_configs:
            - targets: ['otel-example:8080']
          metrics_path: '/metrics'
          scrape_interval: 30s

  # Host metrics receiver
  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
      process:

processors:
  # Batch processor for better performance
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s

  # Resource processor to add resource attributes
  resource:
    attributes:
      - key: environment
        value: development
        action: insert
      - key: service.namespace
        value: gopherkit
        action: insert
      - key: deployment.environment
        value: docker-compose
        action: insert

  # Attributes processor for custom attributes
  attributes:
    actions:
      - key: gopherkit.version
        value: "1.0.0"
        action: insert
      - key: collector.version
        value: "latest"
        action: insert

  # Filter processor to reduce noise
  filter:
    traces:
      span:
        # Filter out health check spans
        - 'attributes["http.route"] == "/health"'
        - 'attributes["http.route"] == "/metrics"'

exporters:
  # Jaeger exporter for traces
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8888"
    const_labels:
      environment: development
      collector: otel

  # OTLP exporters (for external systems)
  otlp/traces:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # File exporters for backup
  file:
    path: ./otel-data/traces.json

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133

  # Performance profiling
  pprof:
    endpoint: 0.0.0.0:1777

  # Z-Pages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, filter, batch]
      exporters: [jaeger, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus, hostmetrics]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [logging]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8889
      level: detailed