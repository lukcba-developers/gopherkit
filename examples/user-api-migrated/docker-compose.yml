version: '3.8'

services:
  user-api-migrated:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
      - "9091:9091"
    environment:
      # Server Configuration
      - PORT=8081
      - ENVIRONMENT=development
      - METRICS_PORT=9091
      
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/userapi_db
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      
      # JWT Configuration
      - JWT_SECRET=user-api-super-secret-jwt-key-for-docker-demo-change-in-production
      - REFRESH_SECRET=user-api-refresh-secret-key-for-docker-demo-change-in-production
      - ACCESS_DURATION=15m
      - REFRESH_DURATION=24h
      - JWT_ISSUER=user-api-migrated
      
      # Cache Configuration
      - CACHE_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - CACHE_PREFIX=userapi:
      - CACHE_TTL=5m
      
      # Security Configuration
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_RPS=100
      - RATE_LIMIT_BURST=10
      - CIRCUIT_BREAKER_ENABLED=true
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
      - CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS,PATCH
      - CORS_ALLOWED_HEADERS=Origin,Content-Type,Accept,Authorization,X-Tenant-ID,X-Correlation-ID
      - CORS_ALLOW_CREDENTIALS=true
      
      # External Services (for demo)
      - AUTH_API_URL=http://localhost:8083
      - CALENDAR_API_URL=http://localhost:8087
      - CHAMPIONSHIP_API_URL=http://localhost:8084
      - NOTIFICATION_API_URL=http://localhost:8090
      
      # Observability Configuration
      - TRACING_ENABLED=true
      - METRICS_ENABLED=true
      - LOG_LEVEL=info
      - SERVICE_VERSION=1.0.0
      - ANALYTICS_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: userapi_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d userapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: gopherkit-user-api
    driver: bridge